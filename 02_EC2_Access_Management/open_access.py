#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –í–°–ï–• –ø–æ—Ä—Ç–æ–≤ (1-65535) –¥–ª—è EC2 –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Security Groups.
üö® –ö–†–ê–ô–ù–ï –û–ü–ê–°–ù–û! –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø–æ—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö IP –∞–¥—Ä–µ—Å–æ–≤!
"""

import boto3
import sys
import os
from datetime import datetime
from botocore.exceptions import ClientError, NoCredentialsError
import logging

def setup_logging(log_file):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    logger = logging.getLogger('open_access')
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_formatter = logging.Formatter('%(asctime)s - %(message)s')
    file_handler.setFormatter(file_formatter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_formatter = logging.Formatter('%(message)s')
    console_handler.setFormatter(console_formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

def get_aws_credentials(access_key_short):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ AWS credentials –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ credentials!
    """
    try:
        # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å credentials
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª credentials.txt —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        # XXXX...|YOUR_SECRET_KEY_HERE
        # XXXX...|YOUR_SECRET_KEY_HERE
        # –∏ —Ç.–¥.
        
        credentials_file = 'credentials.txt'
        
        if not os.path.exists(credentials_file):
            print(f"‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_file}")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª credentials.txt —Å –≤–∞—à–∏–º–∏ AWS credentials")
            return None
            
        with open(credentials_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('|')
                if len(parts) >= 2:
                    access_key = parts[0]
                    secret_key = parts[1]
                    
                    if access_key.startswith(access_key_short[:10]):
                        return {
                            'access_key': access_key,
                            'secret_key': secret_key
                        }
        
        print(f"‚ùå Credentials –¥–ª—è {access_key_short} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è credentials: {e}")
        return None

def open_ports_for_instance(instance_id, region, access_key_short, logger):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
    try:
        logger.info(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {instance_id}")
        logger.info(f"   –†–µ–≥–∏–æ–Ω: {region}")
        logger.info(f"   Access Key: {access_key_short}")
        
        # –ü–æ–ª—É—á–∞–µ–º AWS credentials
        credentials = get_aws_credentials(access_key_short)
        if not credentials:
            logger.error(f"   ‚ùå {instance_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç EC2
        ec2_client = boto3.client(
            'ec2',
            aws_access_key_id=credentials['access_key'],
            aws_secret_access_key=credentials['secret_key'],
            region_name=region
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç–∞–Ω—Å–µ
        response = ec2_client.describe_instances(InstanceIds=[instance_id])
        
        if not response['Reservations']:
            logger.error(f"   ‚ùå {instance_id}: –∏–Ω—Å—Ç–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        instance = response['Reservations'][0]['Instances'][0]
        security_groups = instance.get('SecurityGroups', [])
        
        logger.info(f"   üîí Security Groups: {len(security_groups)}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –í–°–ï –ø–æ—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–º Security Group
        for sg in security_groups:
            sg_id = sg['GroupId']
            sg_name = sg['GroupName']
            logger.info(f"   üîß –û–±–Ω–æ–≤–ª—è–µ–º {sg_name} ({sg_id})")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –í–°–ï–• –ø–æ—Ä—Ç–æ–≤ TCP
            try:
                ec2_client.authorize_security_group_ingress(
                    GroupId=sg_id,
                    IpPermissions=[
                        {
                            'IpProtocol': 'tcp',
                            'FromPort': 1,
                            'ToPort': 65535,
                            'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                        }
                    ]
                )
                logger.info(f"      ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã –í–°–ï TCP –ø–æ—Ä—Ç—ã (1-65535)")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                    logger.info(f"      ‚ö™ TCP –ø–æ—Ä—Ç—ã —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã")
                else:
                    logger.error(f"      ‚ùå –û—à–∏–±–∫–∞ TCP –ø–æ—Ä—Ç–æ–≤: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –í–°–ï–• –ø–æ—Ä—Ç–æ–≤ UDP
            try:
                ec2_client.authorize_security_group_ingress(
                    GroupId=sg_id,
                    IpPermissions=[
                        {
                            'IpProtocol': 'udp',
                            'FromPort': 1,
                            'ToPort': 65535,
                            'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                        }
                    ]
                )
                logger.info(f"      ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã –í–°–ï UDP –ø–æ—Ä—Ç—ã (1-65535)")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                    logger.info(f"      ‚ö™ UDP –ø–æ—Ä—Ç—ã —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã")
                else:
                    logger.error(f"      ‚ùå –û—à–∏–±–∫–∞ UDP –ø–æ—Ä—Ç–æ–≤: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è ICMP
            try:
                ec2_client.authorize_security_group_ingress(
                    GroupId=sg_id,
                    IpPermissions=[
                        {
                            'IpProtocol': 'icmp',
                            'FromPort': -1,
                            'ToPort': -1,
                            'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                        }
                    ]
                )
                logger.info(f"      ‚úÖ –û—Ç–∫—Ä—ã—Ç ICMP (ping)")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                    logger.info(f"      ‚ö™ ICMP —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
                else:
                    logger.error(f"      ‚ùå –û—à–∏–±–∫–∞ ICMP: {e}")
        
        logger.info(f"   ‚úÖ {instance_id}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå {instance_id}: –æ–±—â–∞—è –æ—à–∏–±–∫–∞ - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log_file = 'access_setup_log.txt'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging(log_file)
    
    logger.info("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!")
    logger.info("‚ö†Ô∏è  –û–¢–ö–†–´–í–ê–ï–ú –í–°–ï –ü–û–†–¢–´ (1-65535) –î–õ–Ø –í–°–ï–• IP –ê–î–†–ï–°–û–í!")
    logger.info("üî• –≠–¢–û –ö–†–ê–ô–ù–ï –û–ü–ê–°–ù–û –ò –°–û–ó–î–ê–ï–¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò!")
    logger.info("=" * 80)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!
    instances_to_process = [
        # Windows –∏–Ω—Å—Ç–∞–Ω—Å—ã
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-south-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        
        # Linux –∏–Ω—Å—Ç–∞–Ω—Å—ã
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-south-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-west-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'eu-north-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-southeast-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-southeast-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-southeast-2', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'ap-northeast-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
        {'instance_id': 'i-xxxxxxxxxxxxxxxxx', 'region': 'us-east-1', 'access_key': 'XXXX...', 'ip': 'X.X.X.X'},
    ]
    
    if not instances_to_process:
        logger.warning("‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return
    
    success_count = 0
    failed_count = 0
    
    for instance in instances_to_process:
        success = open_ports_for_instance(
            instance['instance_id'],
            instance['region'],
            instance['access_key'],
            logger
        )
        
        if success:
            success_count += 1
        else:
            failed_count += 1
    
    logger.info(f"\n‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –í–°–ï–• –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info(f"üìä –í—Å–µ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(instances_to_process)}")
    logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    logger.info(f"   ‚ùå –û—à–∏–±–∫–∏: {failed_count}")
    
    logger.info(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:")
    logger.info(f"   üî• –í–°–ï –ü–û–†–¢–´ (1-65535) –û–¢–ö–†–´–¢–´ –î–õ–Ø –í–°–ï–• IP –ê–î–†–ï–°–û–í!")
    logger.info(f"   üî• TCP: 1-65535")
    logger.info(f"   üî• UDP: 1-65535")
    logger.info(f"   üî• ICMP: —Ä–∞–∑—Ä–µ—à–µ–Ω")
    logger.info(f"   üî• CIDR: 0.0.0.0/0 (–≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)")
    
    logger.info(f"\n‚ö†Ô∏è  –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    logger.info(f"   1. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –ø–æ IP –∞–¥—Ä–µ—Å–∞–º")
    logger.info(f"   2. –ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã")
    logger.info(f"   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
    logger.info(f"   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    logger.info(f"   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    
    logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {log_file}")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
